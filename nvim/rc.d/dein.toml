[[plugins]]
repo = 'lambdalisue/trea.vim'
merge = 0

# Fundemental {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys = 0
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'lambdalisue/fila.vim'
merged = 0
hook_post_source = '''
execute 'source' fnameescape(expand('$MYVIM_HOME/rc.d/fila.vim'))
'''

[[plugins]]
repo = 'lambdalisue/qfloc.vim'
merged = 0

[[plugins]]
repo = 'lambdalisue/grea.vim'
hook_add = '''
function! s:grea(bang, query) abort
  let query = empty(a:query) ? input('Grea: ') : a:query
  if empty(query)
    redraw
    return
  endif
  execute printf('Grea%s %s .', a:bang, escape(query, ' '))
endfunction
nnoremap <silent> <Leader>gg :<C-u>call <SID>grea('', '')<CR>
'''

[[plugins]]
repo = 'lambdalisue/readablefold.vim'

[[plugins]]
repo = 'lambdalisue/compl-local-filename.vim'

[[plugins]]
repo = 'lambdalisue/suda.vim'
hook_add = '''
let g:suda_smart_edit = 1

cnoreabbrev e!! e suda://%
cnoreabbrev w!! w suda://%
'''

[[plugins]]
repo = 'lambdalisue/trimmer.vim'
hook_add = '''
augroup trimmer
  autocmd FileType yaml,perl,python,vim,vimspec,javascript,typescript,dosbatch,ps1,sh,iss,pascal Trimmer! enable
augroup END
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = 'JunkfileOpen'
hook_add = '''
let g:junkfile#directory = expand("~/Documents/junkfiles")
'''

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

[[plugins]]
repo = 'lambdalisue/vim-marron'
on_map = [['n', '<Plug>']]
hook_add = '''
nmap <F9> <Plug>(marron-reload-vimrc)<Plug>(marron-reload-gvimrc)
'''

[[plugins]]
repo = 'lambdalisue/vim-manpager'
on_cmd = ['MANPAGER', 'Man']

[[plugins]]
repo = 'tyru/open-browser.vim'
normalized_name='openbrowser'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping
nmap gx <Plug>(openbrowser-smart-search)
xmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Konfekt/FastFold'
hook_add = '''
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
nmap zuz <Plug>(FastFoldUpdate)
xnoremap iz :<C-u>FastFoldUpdate<CR><Esc>:<C-u>normal! ]zv[z<CR>
xnoremap az :<C-u>FastFoldUpdate<CR><Esc>:<C-u>normal! ]zV[z<CR>
'''

[[plugins]]
repo = 'kana/vim-repeat'
hook_add = '''
nmap .     <Plug>(repeat-.)
nmap u     <Plug>(repeat-u)
nmap U     <Plug>(repeat-U)
nmap <C-r> <Plug>(repeat-<C-r>)
nmap g-    <Plug>(repeat-g-)
nmap g+    <Plug>(repeat-g+)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_post_source = '''
execute 'source' fnameescape(expand('$MYVIM_HOME/rc.d/lexima.vim'))
'''

# }}}

# Dependency {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tyru/current-func-info.vim'
# }}}

# App {{{
[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'

[[plugins]]
repo = 'lambdalisue/gina.vim'
merged = 0
hook_add = '''
nnoremap <silent> <Leader>aa :<C-u>Gina status<CR>
nnoremap <silent> <Leader>aA :<C-u>Gina changes HEAD<CR>
nnoremap <silent> <Leader>ac :<C-u>Gina commit<CR>
nnoremap <silent> <Leader>aC :<C-u>Gina commit --amend<CR>
nnoremap <silent> <Leader>ab :<C-u>Gina branch -av<CR>
nnoremap <silent> <Leader>at :<C-u>Gina tag<CR>
nnoremap <silent> <Leader>ag :<C-u>Gina grep<CR>
nnoremap <silent> <Leader>aq :<C-u>Gina qrep<CR>
nnoremap <silent> <Leader>ad :<C-u>Gina changes origin/HEAD...<CR>
nnoremap <silent> <Leader>ah :<C-u>Gina log --graph<CR>
nnoremap <silent> <Leader>aH :<C-u>Gina log --graph --all<CR>
nnoremap <silent> <Leader>al :<C-u>Gina log<CR>
nnoremap <silent> <Leader>aL :<C-u>Gina log :%<CR>
nnoremap <silent> <Leader>af :<C-u>Gina ls<CR>
nnoremap <silent> <Leader>ars :<C-u>Gina show <C-r><C-w><CR>
nnoremap <silent> <Leader>arc :<C-u>Gina changes <C-r><C-w><CR>
'''
hook_post_source = '''
execute 'source' fnameescape(expand('$MYVIM_HOME/rc.d/gina.vim'))
'''

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_add = '''
let g:gista#client#default_username = 'lambdalisue'
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
nnoremap <silent> <Leader>uu :<C-u>UndotreeToggle<CR>
'''

[[plugins]]
repo = 'lambdalisue/lista.vim'
hook_add = '''
nnoremap #  :<C-u>Lista<CR>
nnoremap g# :<C-u>ListaResume<CR>
nnoremap z# :<C-u>ListaCursorWord<CR>
'''

# }}}

# Visualize {{{
[[plugins]]
repo = 'lambdalisue/battery.vim'
hook_add = '''
let g:battery#update_tabline = 1
'''

[[plugins]]
repo = 'lambdalisue/wifi.vim'
hook_add = '''
let g:wifi#update_tabline = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
hook_add = 'let g:previm_show_header = 0'

[[plugins]]
repo = 't9md/vim-quickhl'
depends = 'vim-operator-user'
hook_add = 'map H <Plug>(operator-quickhl-manual-this-motion)'

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
let g:loaded_matchparen = 1
let g:parenmatch = 1

function! s:toggle_vim_parenmatch() abort
  silent! call matchdelete(w:parenmatch)
  let g:parenmatch = g:parenmatch ? 0 : 1
  call parenmatch#update()
endfunction

nnoremap <silent> <Plug>(my-toggle-parenmatch)
      \ :<C-u>call <SID>toggle_vim_parenmatch()<CR>
nmap <C-g>m     <Plug>(my-toggle-parenmatch)
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'
hook_add = '''
let g:cursorword = 1

function! s:toggle_vim_cursorword() abort
  let g:cursorword = g:cursorword ? 0 : 1
  call cursorword#matchadd()
endfunction

nnoremap <silent> <Plug>(my-toggle-cursorword)
      \ :<C-u>call <SID>toggle_vim_cursorword()<CR>
nmap <C-g>c     <Plug>(my-toggle-cursorword)
'''

# }}}

# Editing {{{
[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
autocmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords() abort
  silent! %s/<+FILE NAME+>/\=expand('%:t')/g
  silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
  silent! %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
  if search('<+CURSOR+>')
    execute 'normal! "_da>'
  endif
endfunction
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'tyru/caw.vim'
depends = [
  'vim-operator-user',
  'vim-repeat',
  'context_filetype.vim',
]
hook_add = '''
let g:caw_no_default_keymappings = 1
nmap gc   <Plug>(caw:prefix)
nmap gcc  <Plug>(caw:hatpos:toggle)
nmap gci  <Plug>(caw:hatpos:comment)
nmap gcui <Plug>(caw:hatpos:uncomment)
nmap gcI  <Plug>(caw:zeropos:comment)
nmap gcuI <Plug>(caw:zeropos:uncomment)
nmap gca  <Plug>(caw:dollarpos:comment)
nmap gcua <Plug>(caw:dollarpos:uncomment)
nmap gcw  <Plug>(caw:wrap:toggle)
nmap gcb  <Plug>(caw:box:comment)
xmap gc   <Plug>(caw:prefix)
xmap gcc  <Plug>(caw:hatpos:toggle)
xmap gci  <Plug>(caw:hatpos:comment)
xmap gcui <Plug>(caw:hatpos:uncomment)
xmap gcI  <Plug>(caw:zeropos:comment)
xmap gcuI <Plug>(caw:zeropos:uncomment)
xmap gca  <Plug>(caw:dollarpos:comment)
xmap gcua <Plug>(caw:dollarpos:uncomment)
xmap gcw  <Plug>(caw:wrap:toggle)
xmap gcb  <Plug>(caw:box:comment)
nmap gco  <Plug>(caw:jump:comment-next)
nmap gcO  <Plug>(caw:jump:comment-prev)
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = 'Findent'

[[plugins]]
repo = 'lambdalisue/vim-foldround'
on_map = '<Plug>'
hook_add = '''
nmap <Leader>ff <Plug>(foldround-forward)
'''

# }}}

# Execution {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vim-quickrun-neovim-job'
on_map = '<Plug>'
on_cmd = 'QuickRun'
hook_add = 'nmap <Leader>rr <Plug>(quickrun)'
hook_source = '''
execute 'source' fnameescape(expand('$MYVIM_HOME/rc.d/quickrun.vim'))
'''

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'

# }}}

# Complete {{{
[[plugins]]
repo = 'junegunn/vim-emoji'
hook_add = '''
set completefunc=emoji#complete
'''
# }}}

# Language client protocol {{{
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_post_source = '''
execute 'source' fnameescape(expand('$MYVIM_HOME/rc.d/coc.vim'))
'''
# }}}

# Textobj {{{
[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_line_no_default_key_mappings = 1
omap al <Plug>(textobj-line-a)
omap il <Plug>(textobj-line-i)
xmap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-syntax'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_syntax_no_default_key_mappings = 1
omap ay <Plug>(textobj-syntax-a)
omap iy <Plug>(textobj-syntax-i)
xmap ay <Plug>(textobj-syntax-a)
xmap iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_indent_no_default_key_mappings = 1
omap ai <Plug>(textobj-indent-a)
omap ii <Plug>(textobj-indent-i)
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
omap aI <Plug>(textobj-indent-same-a)
omap iI <Plug>(textobj-indent-same-i)
xmap aI <Plug>(textobj-indent-same-a)
xmap iI <Plug>(textobj-indent-same-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-datetime'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_datetime_no_default_key_mappings = 1
omap ad <Plug>(textobj-datetime-auto)
omap id <Plug>(textobj-datetime-auto)
xmap ad <Plug>(textobj-datetime-auto)
xmap id <Plug>(textobj-datetime-auto)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_fold_no_default_key_mappings = 1
omap az <Plug>(textobj-fold-a)
omap iz <Plug>(textobj-fold-i)
xmap az <Plug>(textobj-fold-a)
xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_url_no_default_key_mappings = 1
omap au <Plug>(textobj-url-a)
omap iu <Plug>(textobj-url-i)
xmap au <Plug>(textobj-url-a)
xmap iu <Plug>(textobj-url-i)
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_parameter_no_default_key_mappings = 1
omap a, <Plug>(textobj-parameter-a)
omap i, <Plug>(textobj-parameter-i)
xmap a, <Plug>(textobj-parameter-a)
xmap i, <Plug>(textobj-parameter-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_multiblock_no_default_key_mappings = 1
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
xmap ab <Plug>(textobj-multiblock-a)
xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-word-column'
depends = 'vim-textobj-user'
hook_add = '''
let g:textobj_wordcolumn_no_default_key_mappings = 1
omap av <Plug>(textobj-wordcolumn-w-a)
omap iv <Plug>(textobj-wordcolumn-w-i)
xmap av <Plug>(textobj-wordcolumn-w-a)
xmap iv <Plug>(textobj-wordcolumn-w-i)

omap aV <Plug>(textobj-wordcolumn-W-a)
omap iV <Plug>(textobj-wordcolumn-W-i)
xmap aV <Plug>(textobj-wordcolumn-W-a)
xmap iV <Plug>(textobj-wordcolumn-W-i)
'''
# }}}

# Operator {{{
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
hook_add = '''
nmap R <Plug>(operator-replace)
xmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
depends = 'vim-operator-user'
hook_add = '''
nmap s <Nop>
xmap s <Nop>
'''

[[plugins]]
repo = 'lambdalisue/vim-operator-breakline'
depends = 'vim-operator-user'
hook_add = '''
nmap <C-g>q <Plug>(operator-breakline-textwidth)
xmap <C-g>q <Plug>(operator-breakline-textwidth)
nmap <C-g>Q <Plug>(operator-breakline-manual)
xmap <C-g>Q <Plug>(operator-breakline-manual)
'''

# }}}

# Colorscheme {{{
[[plugins]]
repo = 'cocopon/iceberg.vim'
# }}}

# Filetype {{{
# [[plugins]]
# repo = 'fatih/vim-go'
# hook_add = '''
# let g:go_code_completion_enabled = 0
# let g:go_fmt_command = "goimports"
# let g:go_metalinter_autosave = 1
# let g:go_metalinter_autosave_enabled = ['vet']
# '''
[[plugins]]
repo = 'mattn/vim-goimports'

[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
autocmd MyAutoCmd FileType vue syntax sync fromstart
'''

[[plugins]]
repo = 'neovimhaskell/haskell-vim'

[[plugins]]
repo = 'PProvost/vim-ps1'

[[plugins]]
repo = 'vim-scripts/python_match.vim'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'elzr/vim-json'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
hook_add = '''
let g:used_javascript_libs = 'jquery,underscore,vue,chai'
'''

[[plugins]]
repo = 'othree/es.next.syntax.vim'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rust_fold = 2
let g:rust_clip_command = 'pbcopy'
let g:rustfmt_autosave = 0  " using coc-rls to auto format
let g:rustfmt_options = '--edition 2018'
'''

# }}}

# Vimscript development {{{
[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'lambdalisue/vim-backslash'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP', 'PrettyPrint']

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'vim-jp/vital.vim'
merged = 0

[[plugins]]
repo = 'lambdalisue/vital-Whisky'
merged = 0

[[plugins]]
repo = 'lambdalisue/vital-Data-String-Formatter'
merged = 0

[[plugins]]
repo = 'vim-jp/vital-complete'
hook_add = '''
autocmd MyAutoCmd FileType vim,vimspec setlocal omnifunc=vital_complete#complete
'''

# }}}

# vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
